// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int             @id @default(autoincrement())
  intraId              String?         @unique
  login                String          @unique
  email                String          @unique
  username             String          @unique
  picture              String
  two_fa_secret        String?
  ifauthenficate       Boolean?
  isOnline             Boolean         @default(false)
  messages             Message[]
  ChannelMembers       ChannelMember[]
  ChannelActionsTaker  ChannelAction[] @relation("ChannelActionsTaker")
  ChannelActionsTarget ChannelAction[] @relation("ChannelActionsTarget")

  // Game Data
  level            Float     @default(0)
  achievements     String[]
  requestGameToken String?
  inGame           Boolean   @default(false)
  MatchHistory     History[]
  Wins             Int       @default(0)
  Lost             Int       @default(0)
  blockedUsers     User[]    @relation("UserFollows")
  blockedBy        User[]    @relation("UserFollows")
  friendTo         User[]    @relation("Friends")
  friends          User[]    @relation("Friends")
}
model Channel {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  type           ChannelType     @default(public)
  password       String?
  member1        String          @default("")
  member2        String          @default("")
  avatar1        String          @default("default.png")
  avatar2        String          @default("default.png")
  createdTime    DateTime        @default(now())
  updatedTime    DateTime        @updatedAt
  channelMembers ChannelMember[]
  channelActions ChannelAction[]
  messages       Message[]
}

model ChannelMember {
  id        Int         @id @default(autoincrement())
  channelId Int
  userId    Int
  role      ChannelRole @default(member)
  username  String      @default("Unknown")
  avatar    String      @default("default.png")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])
  channel   Channel     @relation(fields: [channelId], references: [id])

  @@unique([channelId, userId])
}

model ChannelAction {
  id         Int        @id @default(autoincrement())
  channelId  Int
  takerId    Int
  targetId   Int
  actionType ActionType
  mutedEnd   DateTime?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  taker      User       @relation(name: "ChannelActionsTaker", fields: [takerId], references: [id])
  target     User       @relation(name: "ChannelActionsTarget", fields: [targetId], references: [id])
  channel    Channel    @relation(fields: [channelId], references: [id])
}

model Message {
  id        Int      @id @default(autoincrement())
  channelId Int
  senderId  Int
  avatar    String   @default("default.png")
  replyToId String?  @db.Uuid
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sender    User     @relation(fields: [senderId], references: [id])
  channel   Channel  @relation(fields: [channelId], references: [id])
  username  String   @default("Unknown") @map(name: "login")
}

// Player Match History
model History {
  id     String @id @default(cuid())
  user   User   @relation(fields: [UserId], references: [id])
  UserId Int

  WinnerId    Int
  LoserId     Int
  WinnerName  String
  LoserName   String
  WinnerScore Int
  LoserScore  Int
  GameMode    String
}

enum ChannelType {
  public
  private
  protected
  dm
}

enum ChannelRole {
  owner
  admin
  member
}

enum ActionType {
  kick
  ban
  mute
}
